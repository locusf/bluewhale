//
// Autogenerated by Thrift Compiler (0.5.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

UserStore_checkVersion_args = function(args) {
  this.clientName = null;
  this.edamVersionMajor = 1;
  this.edamVersionMinor = 25;
  if (args) {
    if (args.clientName !== undefined) {
      this.clientName = args.clientName;
    }
    if (args.edamVersionMajor !== undefined) {
      this.edamVersionMajor = args.edamVersionMajor;
    }
    if (args.edamVersionMinor !== undefined) {
      this.edamVersionMinor = args.edamVersionMinor;
    }
  }
};
UserStore_checkVersion_args.prototype = {};
UserStore_checkVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.edamVersionMajor = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.edamVersionMinor = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_checkVersion_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_checkVersion_args');
  if (this.clientName !== null && this.clientName !== undefined) {
    output.writeFieldBegin('clientName', Thrift.Type.STRING, 1);
    output.writeString(this.clientName);
    output.writeFieldEnd();
  }
  if (this.edamVersionMajor !== null && this.edamVersionMajor !== undefined) {
    output.writeFieldBegin('edamVersionMajor', Thrift.Type.I16, 2);
    output.writeI16(this.edamVersionMajor);
    output.writeFieldEnd();
  }
  if (this.edamVersionMinor !== null && this.edamVersionMinor !== undefined) {
    output.writeFieldBegin('edamVersionMinor', Thrift.Type.I16, 3);
    output.writeI16(this.edamVersionMinor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_checkVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserStore_checkVersion_result.prototype = {};
UserStore_checkVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_checkVersion_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_checkVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getBootstrapInfo_args = function(args) {
  this.locale = null;
  if (args) {
    if (args.locale !== undefined) {
      this.locale = args.locale;
    }
  }
};
UserStore_getBootstrapInfo_args.prototype = {};
UserStore_getBootstrapInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getBootstrapInfo_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getBootstrapInfo_args');
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 1);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getBootstrapInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserStore_getBootstrapInfo_result.prototype = {};
UserStore_getBootstrapInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BootstrapInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getBootstrapInfo_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getBootstrapInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticate_args = function(args) {
  this.username = null;
  this.password = null;
  this.consumerKey = null;
  this.consumerSecret = null;
  this.supportsTwoFactor = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.consumerKey !== undefined) {
      this.consumerKey = args.consumerKey;
    }
    if (args.consumerSecret !== undefined) {
      this.consumerSecret = args.consumerSecret;
    }
    if (args.supportsTwoFactor !== undefined) {
      this.supportsTwoFactor = args.supportsTwoFactor;
    }
  }
};
UserStore_authenticate_args.prototype = {};
UserStore_authenticate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.consumerKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.consumerSecret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.supportsTwoFactor = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticate_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticate_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.consumerKey !== null && this.consumerKey !== undefined) {
    output.writeFieldBegin('consumerKey', Thrift.Type.STRING, 3);
    output.writeString(this.consumerKey);
    output.writeFieldEnd();
  }
  if (this.consumerSecret !== null && this.consumerSecret !== undefined) {
    output.writeFieldBegin('consumerSecret', Thrift.Type.STRING, 4);
    output.writeString(this.consumerSecret);
    output.writeFieldEnd();
  }
  if (this.supportsTwoFactor !== null && this.supportsTwoFactor !== undefined) {
    output.writeFieldBegin('supportsTwoFactor', Thrift.Type.BOOL, 5);
    output.writeBool(this.supportsTwoFactor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticate_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_authenticate_result.prototype = {};
UserStore_authenticate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticate_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateLongSession_args = function(args) {
  this.username = null;
  this.password = null;
  this.consumerKey = null;
  this.consumerSecret = null;
  this.deviceIdentifier = null;
  this.deviceDescription = null;
  this.supportsTwoFactor = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.consumerKey !== undefined) {
      this.consumerKey = args.consumerKey;
    }
    if (args.consumerSecret !== undefined) {
      this.consumerSecret = args.consumerSecret;
    }
    if (args.deviceIdentifier !== undefined) {
      this.deviceIdentifier = args.deviceIdentifier;
    }
    if (args.deviceDescription !== undefined) {
      this.deviceDescription = args.deviceDescription;
    }
    if (args.supportsTwoFactor !== undefined) {
      this.supportsTwoFactor = args.supportsTwoFactor;
    }
  }
};
UserStore_authenticateLongSession_args.prototype = {};
UserStore_authenticateLongSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.consumerKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.consumerSecret = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.deviceIdentifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.deviceDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.supportsTwoFactor = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateLongSession_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateLongSession_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.consumerKey !== null && this.consumerKey !== undefined) {
    output.writeFieldBegin('consumerKey', Thrift.Type.STRING, 3);
    output.writeString(this.consumerKey);
    output.writeFieldEnd();
  }
  if (this.consumerSecret !== null && this.consumerSecret !== undefined) {
    output.writeFieldBegin('consumerSecret', Thrift.Type.STRING, 4);
    output.writeString(this.consumerSecret);
    output.writeFieldEnd();
  }
  if (this.deviceIdentifier !== null && this.deviceIdentifier !== undefined) {
    output.writeFieldBegin('deviceIdentifier', Thrift.Type.STRING, 5);
    output.writeString(this.deviceIdentifier);
    output.writeFieldEnd();
  }
  if (this.deviceDescription !== null && this.deviceDescription !== undefined) {
    output.writeFieldBegin('deviceDescription', Thrift.Type.STRING, 6);
    output.writeString(this.deviceDescription);
    output.writeFieldEnd();
  }
  if (this.supportsTwoFactor !== null && this.supportsTwoFactor !== undefined) {
    output.writeFieldBegin('supportsTwoFactor', Thrift.Type.BOOL, 7);
    output.writeBool(this.supportsTwoFactor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateLongSession_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_authenticateLongSession_result.prototype = {};
UserStore_authenticateLongSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateLongSession_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateLongSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_completeTwoFactorAuthentication_args = function(args) {
  this.authenticationToken = null;
  this.oneTimeCode = null;
  this.deviceIdentifier = null;
  this.deviceDescription = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.oneTimeCode !== undefined) {
      this.oneTimeCode = args.oneTimeCode;
    }
    if (args.deviceIdentifier !== undefined) {
      this.deviceIdentifier = args.deviceIdentifier;
    }
    if (args.deviceDescription !== undefined) {
      this.deviceDescription = args.deviceDescription;
    }
  }
};
UserStore_completeTwoFactorAuthentication_args.prototype = {};
UserStore_completeTwoFactorAuthentication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oneTimeCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.deviceIdentifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.deviceDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_completeTwoFactorAuthentication_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_completeTwoFactorAuthentication_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.oneTimeCode !== null && this.oneTimeCode !== undefined) {
    output.writeFieldBegin('oneTimeCode', Thrift.Type.STRING, 2);
    output.writeString(this.oneTimeCode);
    output.writeFieldEnd();
  }
  if (this.deviceIdentifier !== null && this.deviceIdentifier !== undefined) {
    output.writeFieldBegin('deviceIdentifier', Thrift.Type.STRING, 3);
    output.writeString(this.deviceIdentifier);
    output.writeFieldEnd();
  }
  if (this.deviceDescription !== null && this.deviceDescription !== undefined) {
    output.writeFieldBegin('deviceDescription', Thrift.Type.STRING, 4);
    output.writeString(this.deviceDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_completeTwoFactorAuthentication_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_completeTwoFactorAuthentication_result.prototype = {};
UserStore_completeTwoFactorAuthentication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_completeTwoFactorAuthentication_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_completeTwoFactorAuthentication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_revokeLongSession_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_revokeLongSession_args.prototype = {};
UserStore_revokeLongSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_revokeLongSession_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_revokeLongSession_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_revokeLongSession_result = function(args) {
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_revokeLongSession_result.prototype = {};
UserStore_revokeLongSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_revokeLongSession_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_revokeLongSession_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateToBusiness_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_authenticateToBusiness_args.prototype = {};
UserStore_authenticateToBusiness_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateToBusiness_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateToBusiness_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_authenticateToBusiness_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_authenticateToBusiness_result.prototype = {};
UserStore_authenticateToBusiness_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_authenticateToBusiness_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_authenticateToBusiness_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_refreshAuthentication_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_refreshAuthentication_args.prototype = {};
UserStore_refreshAuthentication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_refreshAuthentication_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_refreshAuthentication_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_refreshAuthentication_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_refreshAuthentication_result.prototype = {};
UserStore_refreshAuthentication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_refreshAuthentication_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_refreshAuthentication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getUser_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_getUser_args.prototype = {};
UserStore_getUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getUser_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getUser_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_getUser_result.prototype = {};
UserStore_getUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPublicUserInfo_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
UserStore_getPublicUserInfo_args.prototype = {};
UserStore_getPublicUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPublicUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPublicUserInfo_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPublicUserInfo_result = function(args) {
  this.success = null;
  this.notFoundException = null;
  this.systemException = null;
  this.userException = null;
  if (args instanceof EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.notFoundException !== undefined) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
  }
};
UserStore_getPublicUserInfo_result.prototype = {};
UserStore_getPublicUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PublicUserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new EDAMNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPublicUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPublicUserInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 1);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 3);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPremiumInfo_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_getPremiumInfo_args.prototype = {};
UserStore_getPremiumInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPremiumInfo_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPremiumInfo_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getPremiumInfo_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_getPremiumInfo_result.prototype = {};
UserStore_getPremiumInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PremiumInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getPremiumInfo_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getPremiumInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getNoteStoreUrl_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
UserStore_getNoteStoreUrl_args.prototype = {};
UserStore_getNoteStoreUrl_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getNoteStoreUrl_args.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getNoteStoreUrl_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStore_getNoteStoreUrl_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
UserStore_getNoteStoreUrl_result.prototype = {};
UserStore_getNoteStoreUrl_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserStore_getNoteStoreUrl_result.prototype.write = function(output) {
  output.writeStructBegin('UserStore_getNoteStoreUrl_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserStoreClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
UserStoreClient.prototype = {};
UserStoreClient.prototype.checkVersion = function(clientName, edamVersionMajor, edamVersionMinor, callback) {
  if (callback === undefined) {
    this.send_checkVersion(clientName, edamVersionMajor, edamVersionMinor);
    return this.recv_checkVersion();
  } else {
    var postData = this.send_checkVersion(clientName, edamVersionMajor, edamVersionMinor, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_checkVersion);
  }
};

UserStoreClient.prototype.send_checkVersion = function(clientName, edamVersionMajor, edamVersionMinor, callback) {
  this.output.writeMessageBegin('checkVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_checkVersion_args();
  args.clientName = clientName;
  args.edamVersionMajor = edamVersionMajor;
  args.edamVersionMinor = edamVersionMinor;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_checkVersion = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_checkVersion_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'checkVersion failed: unknown result';
};
UserStoreClient.prototype.getBootstrapInfo = function(locale, callback) {
  if (callback === undefined) {
    this.send_getBootstrapInfo(locale);
    return this.recv_getBootstrapInfo();
  } else {
    var postData = this.send_getBootstrapInfo(locale, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getBootstrapInfo);
  }
};

UserStoreClient.prototype.send_getBootstrapInfo = function(locale, callback) {
  this.output.writeMessageBegin('getBootstrapInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getBootstrapInfo_args();
  args.locale = locale;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_getBootstrapInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_getBootstrapInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getBootstrapInfo failed: unknown result';
};
UserStoreClient.prototype.authenticate = function(username, password, consumerKey, consumerSecret, supportsTwoFactor, callback) {
  if (callback === undefined) {
    this.send_authenticate(username, password, consumerKey, consumerSecret, supportsTwoFactor);
    return this.recv_authenticate();
  } else {
    var postData = this.send_authenticate(username, password, consumerKey, consumerSecret, supportsTwoFactor, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_authenticate);
  }
};

UserStoreClient.prototype.send_authenticate = function(username, password, consumerKey, consumerSecret, supportsTwoFactor, callback) {
  this.output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_authenticate_args();
  args.username = username;
  args.password = password;
  args.consumerKey = consumerKey;
  args.consumerSecret = consumerSecret;
  args.supportsTwoFactor = supportsTwoFactor;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_authenticate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_authenticate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticate failed: unknown result';
};
UserStoreClient.prototype.authenticateLongSession = function(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor, callback) {
  if (callback === undefined) {
    this.send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor);
    return this.recv_authenticateLongSession();
  } else {
    var postData = this.send_authenticateLongSession(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_authenticateLongSession);
  }
};

UserStoreClient.prototype.send_authenticateLongSession = function(username, password, consumerKey, consumerSecret, deviceIdentifier, deviceDescription, supportsTwoFactor, callback) {
  this.output.writeMessageBegin('authenticateLongSession', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_authenticateLongSession_args();
  args.username = username;
  args.password = password;
  args.consumerKey = consumerKey;
  args.consumerSecret = consumerSecret;
  args.deviceIdentifier = deviceIdentifier;
  args.deviceDescription = deviceDescription;
  args.supportsTwoFactor = supportsTwoFactor;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_authenticateLongSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_authenticateLongSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticateLongSession failed: unknown result';
};
UserStoreClient.prototype.completeTwoFactorAuthentication = function(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription, callback) {
  if (callback === undefined) {
    this.send_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription);
    return this.recv_completeTwoFactorAuthentication();
  } else {
    var postData = this.send_completeTwoFactorAuthentication(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_completeTwoFactorAuthentication);
  }
};

UserStoreClient.prototype.send_completeTwoFactorAuthentication = function(authenticationToken, oneTimeCode, deviceIdentifier, deviceDescription, callback) {
  this.output.writeMessageBegin('completeTwoFactorAuthentication', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_completeTwoFactorAuthentication_args();
  args.authenticationToken = authenticationToken;
  args.oneTimeCode = oneTimeCode;
  args.deviceIdentifier = deviceIdentifier;
  args.deviceDescription = deviceDescription;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_completeTwoFactorAuthentication = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_completeTwoFactorAuthentication_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'completeTwoFactorAuthentication failed: unknown result';
};
UserStoreClient.prototype.revokeLongSession = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_revokeLongSession(authenticationToken);
    this.recv_revokeLongSession();
  } else {
    var postData = this.send_revokeLongSession(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_revokeLongSession);
  }
};

UserStoreClient.prototype.send_revokeLongSession = function(authenticationToken, callback) {
  this.output.writeMessageBegin('revokeLongSession', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_revokeLongSession_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_revokeLongSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_revokeLongSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  return;
};
UserStoreClient.prototype.authenticateToBusiness = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_authenticateToBusiness(authenticationToken);
    return this.recv_authenticateToBusiness();
  } else {
    var postData = this.send_authenticateToBusiness(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_authenticateToBusiness);
  }
};

UserStoreClient.prototype.send_authenticateToBusiness = function(authenticationToken, callback) {
  this.output.writeMessageBegin('authenticateToBusiness', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_authenticateToBusiness_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_authenticateToBusiness = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_authenticateToBusiness_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'authenticateToBusiness failed: unknown result';
};
UserStoreClient.prototype.refreshAuthentication = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_refreshAuthentication(authenticationToken);
    return this.recv_refreshAuthentication();
  } else {
    var postData = this.send_refreshAuthentication(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_refreshAuthentication);
  }
};

UserStoreClient.prototype.send_refreshAuthentication = function(authenticationToken, callback) {
  this.output.writeMessageBegin('refreshAuthentication', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_refreshAuthentication_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_refreshAuthentication = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_refreshAuthentication_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'refreshAuthentication failed: unknown result';
};
UserStoreClient.prototype.getUser = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_getUser(authenticationToken);
    return this.recv_getUser();
  } else {
    var postData = this.send_getUser(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getUser);
  }
};

UserStoreClient.prototype.send_getUser = function(authenticationToken, callback) {
  this.output.writeMessageBegin('getUser', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getUser_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_getUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_getUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUser failed: unknown result';
};
UserStoreClient.prototype.getPublicUserInfo = function(username, callback) {
  if (callback === undefined) {
    this.send_getPublicUserInfo(username);
    return this.recv_getPublicUserInfo();
  } else {
    var postData = this.send_getPublicUserInfo(username, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getPublicUserInfo);
  }
};

UserStoreClient.prototype.send_getPublicUserInfo = function(username, callback) {
  this.output.writeMessageBegin('getPublicUserInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getPublicUserInfo_args();
  args.username = username;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_getPublicUserInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_getPublicUserInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPublicUserInfo failed: unknown result';
};
UserStoreClient.prototype.getPremiumInfo = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_getPremiumInfo(authenticationToken);
    return this.recv_getPremiumInfo();
  } else {
    var postData = this.send_getPremiumInfo(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getPremiumInfo);
  }
};

UserStoreClient.prototype.send_getPremiumInfo = function(authenticationToken, callback) {
  this.output.writeMessageBegin('getPremiumInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getPremiumInfo_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_getPremiumInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_getPremiumInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPremiumInfo failed: unknown result';
};
UserStoreClient.prototype.getNoteStoreUrl = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_getNoteStoreUrl(authenticationToken);
    return this.recv_getNoteStoreUrl();
  } else {
    var postData = this.send_getNoteStoreUrl(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getNoteStoreUrl);
  }
};

UserStoreClient.prototype.send_getNoteStoreUrl = function(authenticationToken, callback) {
  this.output.writeMessageBegin('getNoteStoreUrl', Thrift.MessageType.CALL, this.seqid);
  var args = new UserStore_getNoteStoreUrl_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserStoreClient.prototype.recv_getNoteStoreUrl = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserStore_getNoteStoreUrl_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNoteStoreUrl failed: unknown result';
};
