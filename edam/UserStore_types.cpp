/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "UserStore_types.h"

namespace evernote { namespace edam {

const char* PublicUserInfo::ascii_fingerprint = "136F76319E3F0B8411FD5BB100F8885A";
const uint8_t PublicUserInfo::binary_fingerprint[16] = {0x13,0x6F,0x76,0x31,0x9E,0x3F,0x0B,0x84,0x11,0xFD,0x5B,0xB1,0x00,0xF8,0x88,0x5A};

uint32_t PublicUserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userId = false;
  bool isset_shardId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shardId);
          isset_shardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->privilege = (evernote::edam::PrivilegeLevel::type)ecast0;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteStoreUrl);
          this->__isset.noteStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webApiUrlPrefix);
          this->__isset.webApiUrlPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_shardId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PublicUserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PublicUserInfo");
  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("shardId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->shardId);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteStoreUrl) {
    xfer += oprot->writeFieldBegin("noteStoreUrl", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->noteStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.webApiUrlPrefix) {
    xfer += oprot->writeFieldBegin("webApiUrlPrefix", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->webApiUrlPrefix);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AuthenticationResult::ascii_fingerprint = "AC3ACA1F66892F38A3B6A141A932B007";
const uint8_t AuthenticationResult::binary_fingerprint[16] = {0xAC,0x3A,0xCA,0x1F,0x66,0x89,0x2F,0x38,0xA3,0xB6,0xA1,0x41,0xA9,0x32,0xB0,0x07};

uint32_t AuthenticationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currentTime = false;
  bool isset_authenticationToken = false;
  bool isset_expiration = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          isset_currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authenticationToken);
          isset_authenticationToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expiration);
          isset_expiration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->publicUserInfo.read(iprot);
          this->__isset.publicUserInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteStoreUrl);
          this->__isset.noteStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webApiUrlPrefix);
          this->__isset.webApiUrlPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->secondFactorRequired);
          this->__isset.secondFactorRequired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->secondFactorDeliveryHint);
          this->__isset.secondFactorDeliveryHint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currentTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_authenticationToken)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expiration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuthenticationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthenticationResult");
  xfer += oprot->writeFieldBegin("currentTime", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->currentTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("authenticationToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->authenticationToken);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("expiration", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->expiration);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.user) {
    xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->user.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.publicUserInfo) {
    xfer += oprot->writeFieldBegin("publicUserInfo", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->publicUserInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteStoreUrl) {
    xfer += oprot->writeFieldBegin("noteStoreUrl", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->noteStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.webApiUrlPrefix) {
    xfer += oprot->writeFieldBegin("webApiUrlPrefix", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->webApiUrlPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.secondFactorRequired) {
    xfer += oprot->writeFieldBegin("secondFactorRequired", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->secondFactorRequired);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.secondFactorDeliveryHint) {
    xfer += oprot->writeFieldBegin("secondFactorDeliveryHint", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->secondFactorDeliveryHint);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BootstrapSettings::ascii_fingerprint = "70BFB06B5A018C74836FE173445B1EBF";
const uint8_t BootstrapSettings::binary_fingerprint[16] = {0x70,0xBF,0xB0,0x6B,0x5A,0x01,0x8C,0x74,0x83,0x6F,0xE1,0x73,0x44,0x5B,0x1E,0xBF};

uint32_t BootstrapSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_serviceHost = false;
  bool isset_marketingUrl = false;
  bool isset_supportUrl = false;
  bool isset_accountEmailDomain = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceHost);
          isset_serviceHost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->marketingUrl);
          isset_marketingUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supportUrl);
          isset_supportUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accountEmailDomain);
          isset_accountEmailDomain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableFacebookSharing);
          this->__isset.enableFacebookSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableGiftSubscriptions);
          this->__isset.enableGiftSubscriptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSupportTickets);
          this->__isset.enableSupportTickets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSharedNotebooks);
          this->__isset.enableSharedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSingleNoteSharing);
          this->__isset.enableSingleNoteSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableSponsoredAccounts);
          this->__isset.enableSponsoredAccounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableTwitterSharing);
          this->__isset.enableTwitterSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableLinkedInSharing);
          this->__isset.enableLinkedInSharing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enablePublicNotebooks);
          this->__isset.enablePublicNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_serviceHost)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_marketingUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supportUrl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_accountEmailDomain)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BootstrapSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BootstrapSettings");
  xfer += oprot->writeFieldBegin("serviceHost", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serviceHost);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("marketingUrl", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->marketingUrl);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("supportUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->supportUrl);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("accountEmailDomain", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->accountEmailDomain);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.enableFacebookSharing) {
    xfer += oprot->writeFieldBegin("enableFacebookSharing", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->enableFacebookSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableGiftSubscriptions) {
    xfer += oprot->writeFieldBegin("enableGiftSubscriptions", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->enableGiftSubscriptions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSupportTickets) {
    xfer += oprot->writeFieldBegin("enableSupportTickets", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->enableSupportTickets);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSharedNotebooks) {
    xfer += oprot->writeFieldBegin("enableSharedNotebooks", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->enableSharedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSingleNoteSharing) {
    xfer += oprot->writeFieldBegin("enableSingleNoteSharing", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->enableSingleNoteSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableSponsoredAccounts) {
    xfer += oprot->writeFieldBegin("enableSponsoredAccounts", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->enableSponsoredAccounts);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableTwitterSharing) {
    xfer += oprot->writeFieldBegin("enableTwitterSharing", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->enableTwitterSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableLinkedInSharing) {
    xfer += oprot->writeFieldBegin("enableLinkedInSharing", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->enableLinkedInSharing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enablePublicNotebooks) {
    xfer += oprot->writeFieldBegin("enablePublicNotebooks", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->enablePublicNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BootstrapProfile::ascii_fingerprint = "09FEABA36C8610270E1D3AD124EFFDF3";
const uint8_t BootstrapProfile::binary_fingerprint[16] = {0x09,0xFE,0xAB,0xA3,0x6C,0x86,0x10,0x27,0x0E,0x1D,0x3A,0xD1,0x24,0xEF,0xFD,0xF3};

uint32_t BootstrapProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_settings = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->settings.read(iprot);
          isset_settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_settings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BootstrapProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BootstrapProfile");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->settings.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BootstrapInfo::ascii_fingerprint = "ECB0F629D029C81964A245F17D9BBA00";
const uint8_t BootstrapInfo::binary_fingerprint[16] = {0xEC,0xB0,0xF6,0x29,0xD0,0x29,0xC8,0x19,0x64,0xA2,0x45,0xF1,0x7D,0x9B,0xBA,0x00};

uint32_t BootstrapInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_profiles = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->profiles.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            iprot->readListBegin(_etype4, _size1);
            this->profiles.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->profiles[_i5].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_profiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_profiles)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BootstrapInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BootstrapInfo");
  xfer += oprot->writeFieldBegin("profiles", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->profiles.size());
    std::vector<BootstrapProfile> ::const_iterator _iter6;
    for (_iter6 = this->profiles.begin(); _iter6 != this->profiles.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
