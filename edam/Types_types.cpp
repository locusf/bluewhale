/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "Types_types.h"

namespace evernote { namespace edam {

const char* Data::ascii_fingerprint = "BAAB2C3118BDB468C051932BB163B2AF";
const uint8_t Data::binary_fingerprint[16] = {0xBA,0xAB,0x2C,0x31,0x18,0xBD,0xB4,0x68,0xC0,0x51,0x93,0x2B,0xB1,0x63,0xB2,0xAF};

uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bodyHash);
          this->__isset.bodyHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Data");
  if (this->__isset.bodyHash) {
    xfer += oprot->writeFieldBegin("bodyHash", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->bodyHash);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body) {
    xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeBinary(this->body);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UserAttributes::ascii_fingerprint = "93F29143B9EFCD4FBA381A30A4AF2684";
const uint8_t UserAttributes::binary_fingerprint[16] = {0x93,0xF2,0x91,0x43,0xB9,0xEF,0xCD,0x4F,0xBA,0x38,0x1A,0x30,0xA4,0xAF,0x26,0x84};

uint32_t UserAttributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultLocationName);
          this->__isset.defaultLocationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->defaultLatitude);
          this->__isset.defaultLatitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->defaultLongitude);
          this->__isset.defaultLongitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preactivation);
          this->__isset.preactivation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->viewedPromotions.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->viewedPromotions.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->viewedPromotions[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.viewedPromotions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->incomingEmailAddress);
          this->__isset.incomingEmailAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->recentMailedAddresses.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->recentMailedAddresses.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readString(this->recentMailedAddresses[_i9]);
            }
            iprot->readListEnd();
          }
          this->__isset.recentMailedAddresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dateAgreedToTermsOfService);
          this->__isset.dateAgreedToTermsOfService = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxReferrals);
          this->__isset.maxReferrals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->referralCount);
          this->__isset.referralCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refererCode);
          this->__isset.refererCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sentEmailDate);
          this->__isset.sentEmailDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sentEmailCount);
          this->__isset.sentEmailCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dailyEmailLimit);
          this->__isset.dailyEmailLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->emailOptOutDate);
          this->__isset.emailOptOutDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partnerEmailOptInDate);
          this->__isset.partnerEmailOptInDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->preferredLanguage);
          this->__isset.preferredLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->preferredCountry);
          this->__isset.preferredCountry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->clipFullPage);
          this->__isset.clipFullPage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->twitterUserName);
          this->__isset.twitterUserName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->twitterId);
          this->__isset.twitterId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->groupName);
          this->__isset.groupName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recognitionLanguage);
          this->__isset.recognitionLanguage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->referralProof);
          this->__isset.referralProof = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->educationalDiscount);
          this->__isset.educationalDiscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessAddress);
          this->__isset.businessAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hideSponsorBilling);
          this->__isset.hideSponsorBilling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->taxExempt);
          this->__isset.taxExempt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useEmailAutoFiling);
          this->__isset.useEmailAutoFiling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->reminderEmailConfig = (ReminderEmailConfig::type)ecast10;
          this->__isset.reminderEmailConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserAttributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserAttributes");
  if (this->__isset.defaultLocationName) {
    xfer += oprot->writeFieldBegin("defaultLocationName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->defaultLocationName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultLatitude) {
    xfer += oprot->writeFieldBegin("defaultLatitude", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->defaultLatitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultLongitude) {
    xfer += oprot->writeFieldBegin("defaultLongitude", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->defaultLongitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preactivation) {
    xfer += oprot->writeFieldBegin("preactivation", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->preactivation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.viewedPromotions) {
    xfer += oprot->writeFieldBegin("viewedPromotions", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->viewedPromotions.size());
      std::vector<std::string> ::const_iterator _iter11;
      for (_iter11 = this->viewedPromotions.begin(); _iter11 != this->viewedPromotions.end(); ++_iter11)
      {
        xfer += oprot->writeString((*_iter11));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.incomingEmailAddress) {
    xfer += oprot->writeFieldBegin("incomingEmailAddress", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->incomingEmailAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recentMailedAddresses) {
    xfer += oprot->writeFieldBegin("recentMailedAddresses", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->recentMailedAddresses.size());
      std::vector<std::string> ::const_iterator _iter12;
      for (_iter12 = this->recentMailedAddresses.begin(); _iter12 != this->recentMailedAddresses.end(); ++_iter12)
      {
        xfer += oprot->writeString((*_iter12));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.comments) {
    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->comments);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dateAgreedToTermsOfService) {
    xfer += oprot->writeFieldBegin("dateAgreedToTermsOfService", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->dateAgreedToTermsOfService);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxReferrals) {
    xfer += oprot->writeFieldBegin("maxReferrals", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->maxReferrals);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.referralCount) {
    xfer += oprot->writeFieldBegin("referralCount", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->referralCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.refererCode) {
    xfer += oprot->writeFieldBegin("refererCode", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->refererCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sentEmailDate) {
    xfer += oprot->writeFieldBegin("sentEmailDate", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->sentEmailDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sentEmailCount) {
    xfer += oprot->writeFieldBegin("sentEmailCount", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->sentEmailCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dailyEmailLimit) {
    xfer += oprot->writeFieldBegin("dailyEmailLimit", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->dailyEmailLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.emailOptOutDate) {
    xfer += oprot->writeFieldBegin("emailOptOutDate", ::apache::thrift::protocol::T_I64, 18);
    xfer += oprot->writeI64(this->emailOptOutDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partnerEmailOptInDate) {
    xfer += oprot->writeFieldBegin("partnerEmailOptInDate", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->partnerEmailOptInDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preferredLanguage) {
    xfer += oprot->writeFieldBegin("preferredLanguage", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->preferredLanguage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preferredCountry) {
    xfer += oprot->writeFieldBegin("preferredCountry", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->preferredCountry);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clipFullPage) {
    xfer += oprot->writeFieldBegin("clipFullPage", ::apache::thrift::protocol::T_BOOL, 22);
    xfer += oprot->writeBool(this->clipFullPage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.twitterUserName) {
    xfer += oprot->writeFieldBegin("twitterUserName", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->twitterUserName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.twitterId) {
    xfer += oprot->writeFieldBegin("twitterId", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->twitterId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupName) {
    xfer += oprot->writeFieldBegin("groupName", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->groupName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recognitionLanguage) {
    xfer += oprot->writeFieldBegin("recognitionLanguage", ::apache::thrift::protocol::T_STRING, 26);
    xfer += oprot->writeString(this->recognitionLanguage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.referralProof) {
    xfer += oprot->writeFieldBegin("referralProof", ::apache::thrift::protocol::T_STRING, 28);
    xfer += oprot->writeString(this->referralProof);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.educationalDiscount) {
    xfer += oprot->writeFieldBegin("educationalDiscount", ::apache::thrift::protocol::T_BOOL, 29);
    xfer += oprot->writeBool(this->educationalDiscount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessAddress) {
    xfer += oprot->writeFieldBegin("businessAddress", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->businessAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hideSponsorBilling) {
    xfer += oprot->writeFieldBegin("hideSponsorBilling", ::apache::thrift::protocol::T_BOOL, 31);
    xfer += oprot->writeBool(this->hideSponsorBilling);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.taxExempt) {
    xfer += oprot->writeFieldBegin("taxExempt", ::apache::thrift::protocol::T_BOOL, 32);
    xfer += oprot->writeBool(this->taxExempt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useEmailAutoFiling) {
    xfer += oprot->writeFieldBegin("useEmailAutoFiling", ::apache::thrift::protocol::T_BOOL, 33);
    xfer += oprot->writeBool(this->useEmailAutoFiling);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderEmailConfig) {
    xfer += oprot->writeFieldBegin("reminderEmailConfig", ::apache::thrift::protocol::T_I32, 34);
    xfer += oprot->writeI32((int32_t)this->reminderEmailConfig);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Accounting::ascii_fingerprint = "294DFAA0B15E429F7D5E31FEB816BD37";
const uint8_t Accounting::binary_fingerprint[16] = {0x29,0x4D,0xFA,0xA0,0xB1,0x5E,0x42,0x9F,0x7D,0x5E,0x31,0xFE,0xB8,0x16,0xBD,0x37};

uint32_t Accounting::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploadLimit);
          this->__isset.uploadLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploadLimitEnd);
          this->__isset.uploadLimitEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploadLimitNextMonth);
          this->__isset.uploadLimitNextMonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->premiumServiceStatus = (PremiumOrderStatus::type)ecast13;
          this->__isset.premiumServiceStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumOrderNumber);
          this->__isset.premiumOrderNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumCommerceService);
          this->__isset.premiumCommerceService = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->premiumServiceStart);
          this->__isset.premiumServiceStart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumServiceSKU);
          this->__isset.premiumServiceSKU = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastSuccessfulCharge);
          this->__isset.lastSuccessfulCharge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastFailedCharge);
          this->__isset.lastFailedCharge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastFailedChargeReason);
          this->__isset.lastFailedChargeReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nextPaymentDue);
          this->__isset.nextPaymentDue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->premiumLockUntil);
          this->__isset.premiumLockUntil = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->premiumSubscriptionNumber);
          this->__isset.premiumSubscriptionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastRequestedCharge);
          this->__isset.lastRequestedCharge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unitPrice);
          this->__isset.unitPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessId);
          this->__isset.businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessName);
          this->__isset.businessName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->businessRole = (BusinessUserRole::type)ecast14;
          this->__isset.businessRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unitDiscount);
          this->__isset.unitDiscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nextChargeDate);
          this->__isset.nextChargeDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Accounting::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Accounting");
  if (this->__isset.uploadLimit) {
    xfer += oprot->writeFieldBegin("uploadLimit", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->uploadLimit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uploadLimitEnd) {
    xfer += oprot->writeFieldBegin("uploadLimitEnd", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->uploadLimitEnd);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uploadLimitNextMonth) {
    xfer += oprot->writeFieldBegin("uploadLimitNextMonth", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->uploadLimitNextMonth);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumServiceStatus) {
    xfer += oprot->writeFieldBegin("premiumServiceStatus", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->premiumServiceStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumOrderNumber) {
    xfer += oprot->writeFieldBegin("premiumOrderNumber", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->premiumOrderNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumCommerceService) {
    xfer += oprot->writeFieldBegin("premiumCommerceService", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->premiumCommerceService);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumServiceStart) {
    xfer += oprot->writeFieldBegin("premiumServiceStart", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->premiumServiceStart);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumServiceSKU) {
    xfer += oprot->writeFieldBegin("premiumServiceSKU", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->premiumServiceSKU);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastSuccessfulCharge) {
    xfer += oprot->writeFieldBegin("lastSuccessfulCharge", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->lastSuccessfulCharge);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastFailedCharge) {
    xfer += oprot->writeFieldBegin("lastFailedCharge", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->lastFailedCharge);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastFailedChargeReason) {
    xfer += oprot->writeFieldBegin("lastFailedChargeReason", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->lastFailedChargeReason);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextPaymentDue) {
    xfer += oprot->writeFieldBegin("nextPaymentDue", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->nextPaymentDue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumLockUntil) {
    xfer += oprot->writeFieldBegin("premiumLockUntil", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->premiumLockUntil);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updated) {
    xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->updated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumSubscriptionNumber) {
    xfer += oprot->writeFieldBegin("premiumSubscriptionNumber", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->premiumSubscriptionNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastRequestedCharge) {
    xfer += oprot->writeFieldBegin("lastRequestedCharge", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->lastRequestedCharge);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currency) {
    xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_STRING, 18);
    xfer += oprot->writeString(this->currency);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unitPrice) {
    xfer += oprot->writeFieldBegin("unitPrice", ::apache::thrift::protocol::T_I32, 19);
    xfer += oprot->writeI32(this->unitPrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessId) {
    xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32(this->businessId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessName) {
    xfer += oprot->writeFieldBegin("businessName", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->businessName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessRole) {
    xfer += oprot->writeFieldBegin("businessRole", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32((int32_t)this->businessRole);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unitDiscount) {
    xfer += oprot->writeFieldBegin("unitDiscount", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->unitDiscount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nextChargeDate) {
    xfer += oprot->writeFieldBegin("nextChargeDate", ::apache::thrift::protocol::T_I64, 24);
    xfer += oprot->writeI64(this->nextChargeDate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BusinessUserInfo::ascii_fingerprint = "F41110BF1C14BFD0DCB9D5A09F339E2D";
const uint8_t BusinessUserInfo::binary_fingerprint[16] = {0xF4,0x11,0x10,0xBF,0x1C,0x14,0xBF,0xD0,0xDC,0xB9,0xD5,0xA0,0x9F,0x33,0x9E,0x2D};

uint32_t BusinessUserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessId);
          this->__isset.businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->businessName);
          this->__isset.businessName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->role = (BusinessUserRole::type)ecast15;
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusinessUserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BusinessUserInfo");
  if (this->__isset.businessId) {
    xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->businessId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessName) {
    xfer += oprot->writeFieldBegin("businessName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->businessName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.role) {
    xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->role);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* PremiumInfo::ascii_fingerprint = "0119FDD440C3B0E05C301B1B626B09F1";
const uint8_t PremiumInfo::binary_fingerprint[16] = {0x01,0x19,0xFD,0xD4,0x40,0xC3,0xB0,0xE0,0x5C,0x30,0x1B,0x1B,0x62,0x6B,0x09,0xF1};

uint32_t PremiumInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_currentTime = false;
  bool isset_premium = false;
  bool isset_premiumRecurring = false;
  bool isset_premiumExtendable = false;
  bool isset_premiumPending = false;
  bool isset_premiumCancellationPending = false;
  bool isset_canPurchaseUploadAllowance = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          isset_currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->premium);
          isset_premium = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->premiumRecurring);
          isset_premiumRecurring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->premiumExpirationDate);
          this->__isset.premiumExpirationDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->premiumExtendable);
          isset_premiumExtendable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->premiumPending);
          isset_premiumPending = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->premiumCancellationPending);
          isset_premiumCancellationPending = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->canPurchaseUploadAllowance);
          isset_canPurchaseUploadAllowance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sponsoredGroupName);
          this->__isset.sponsoredGroupName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->sponsoredGroupRole = (SponsoredGroupRole::type)ecast16;
          this->__isset.sponsoredGroupRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->premiumUpgradable);
          this->__isset.premiumUpgradable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_currentTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_premium)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_premiumRecurring)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_premiumExtendable)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_premiumPending)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_premiumCancellationPending)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_canPurchaseUploadAllowance)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PremiumInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PremiumInfo");
  xfer += oprot->writeFieldBegin("currentTime", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->currentTime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("premium", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->premium);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("premiumRecurring", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->premiumRecurring);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.premiumExpirationDate) {
    xfer += oprot->writeFieldBegin("premiumExpirationDate", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->premiumExpirationDate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("premiumExtendable", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->premiumExtendable);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("premiumPending", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->premiumPending);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("premiumCancellationPending", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->premiumCancellationPending);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("canPurchaseUploadAllowance", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->canPurchaseUploadAllowance);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.sponsoredGroupName) {
    xfer += oprot->writeFieldBegin("sponsoredGroupName", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->sponsoredGroupName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sponsoredGroupRole) {
    xfer += oprot->writeFieldBegin("sponsoredGroupRole", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32((int32_t)this->sponsoredGroupRole);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumUpgradable) {
    xfer += oprot->writeFieldBegin("premiumUpgradable", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->premiumUpgradable);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* User::ascii_fingerprint = "28005E28FBEBD399E3B2C130DE25F380";
const uint8_t User::binary_fingerprint[16] = {0x28,0x00,0x5E,0x28,0xFB,0xEB,0xD3,0x99,0xE3,0xB2,0xC1,0x30,0xDE,0x25,0xF3,0x80};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timezone);
          this->__isset.timezone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->privilege = (PrivilegeLevel::type)ecast17;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deleted);
          this->__isset.deleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shardId);
          this->__isset.shardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributes.read(iprot);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->accounting.read(iprot);
          this->__isset.accounting = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->premiumInfo.read(iprot);
          this->__isset.premiumInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->businessUserInfo.read(iprot);
          this->__isset.businessUserInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("User");
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timezone) {
    xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->timezone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.created) {
    xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->created);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updated) {
    xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->updated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleted) {
    xfer += oprot->writeFieldBegin("deleted", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->deleted);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shardId) {
    xfer += oprot->writeFieldBegin("shardId", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->shardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->attributes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.accounting) {
    xfer += oprot->writeFieldBegin("accounting", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->accounting.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.premiumInfo) {
    xfer += oprot->writeFieldBegin("premiumInfo", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->premiumInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessUserInfo) {
    xfer += oprot->writeFieldBegin("businessUserInfo", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->businessUserInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Tag::ascii_fingerprint = "2E5BF02AE592E16964727D77D7FFB2D2";
const uint8_t Tag::binary_fingerprint[16] = {0x2E,0x5B,0xF0,0x2A,0xE5,0x92,0xE1,0x69,0x64,0x72,0x7D,0x77,0xD7,0xFF,0xB2,0xD2};

uint32_t Tag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parentGuid);
          this->__isset.parentGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tag");
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parentGuid) {
    xfer += oprot->writeFieldBegin("parentGuid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->parentGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* LazyMap::ascii_fingerprint = "4C4C51B5D8C83C870E0A49A3B26C575F";
const uint8_t LazyMap::binary_fingerprint[16] = {0x4C,0x4C,0x51,0xB5,0xD8,0xC8,0x3C,0x87,0x0E,0x0A,0x49,0xA3,0xB2,0x6C,0x57,0x5F};

uint32_t LazyMap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->keysOnly.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            iprot->readSetBegin(_etype21, _size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              std::string _elem23;
              xfer += iprot->readString(_elem23);
              this->keysOnly.insert(_elem23);
            }
            iprot->readSetEnd();
          }
          this->__isset.keysOnly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->fullMap.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _ktype25;
            ::apache::thrift::protocol::TType _vtype26;
            iprot->readMapBegin(_ktype25, _vtype26, _size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              std::string _key29;
              xfer += iprot->readString(_key29);
              std::string& _val30 = this->fullMap[_key29];
              xfer += iprot->readString(_val30);
            }
            iprot->readMapEnd();
          }
          this->__isset.fullMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LazyMap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LazyMap");
  if (this->__isset.keysOnly) {
    xfer += oprot->writeFieldBegin("keysOnly", ::apache::thrift::protocol::T_SET, 1);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, this->keysOnly.size());
      std::set<std::string> ::const_iterator _iter31;
      for (_iter31 = this->keysOnly.begin(); _iter31 != this->keysOnly.end(); ++_iter31)
      {
        xfer += oprot->writeString((*_iter31));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fullMap) {
    xfer += oprot->writeFieldBegin("fullMap", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, this->fullMap.size());
      std::map<std::string, std::string> ::const_iterator _iter32;
      for (_iter32 = this->fullMap.begin(); _iter32 != this->fullMap.end(); ++_iter32)
      {
        xfer += oprot->writeString(_iter32->first);
        xfer += oprot->writeString(_iter32->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ResourceAttributes::ascii_fingerprint = "5EB9A2A0FEC66DB9B16801F7F67ED0A4";
const uint8_t ResourceAttributes::binary_fingerprint[16] = {0x5E,0xB9,0xA2,0xA0,0xFE,0xC6,0x6D,0xB9,0xB1,0x68,0x01,0xF7,0xF6,0x7E,0xD0,0xA4};

uint32_t ResourceAttributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceURL);
          this->__isset.sourceURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraMake);
          this->__isset.cameraMake = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cameraModel);
          this->__isset.cameraModel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->clientWillIndex);
          this->__isset.clientWillIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recoType);
          this->__isset.recoType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileName);
          this->__isset.fileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->attachment);
          this->__isset.attachment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationData.read(iprot);
          this->__isset.applicationData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResourceAttributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResourceAttributes");
  if (this->__isset.sourceURL) {
    xfer += oprot->writeFieldBegin("sourceURL", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->sourceURL);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.latitude) {
    xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->latitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longitude) {
    xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->longitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.altitude) {
    xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->altitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cameraMake) {
    xfer += oprot->writeFieldBegin("cameraMake", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->cameraMake);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cameraModel) {
    xfer += oprot->writeFieldBegin("cameraModel", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->cameraModel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clientWillIndex) {
    xfer += oprot->writeFieldBegin("clientWillIndex", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->clientWillIndex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recoType) {
    xfer += oprot->writeFieldBegin("recoType", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->recoType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fileName) {
    xfer += oprot->writeFieldBegin("fileName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->fileName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attachment) {
    xfer += oprot->writeFieldBegin("attachment", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->attachment);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationData) {
    xfer += oprot->writeFieldBegin("applicationData", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->applicationData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Resource::ascii_fingerprint = "DE051FC9AA97874E785B790F8086691F";
const uint8_t Resource::binary_fingerprint[16] = {0xDE,0x05,0x1F,0xC9,0xAA,0x97,0x87,0x4E,0x78,0x5B,0x79,0x0F,0x80,0x86,0x69,0x1F};

uint32_t Resource::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteGuid);
          this->__isset.noteGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mime);
          this->__isset.mime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recognition.read(iprot);
          this->__isset.recognition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributes.read(iprot);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alternateData.read(iprot);
          this->__isset.alternateData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Resource::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Resource");
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteGuid) {
    xfer += oprot->writeFieldBegin("noteGuid", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->noteGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mime) {
    xfer += oprot->writeFieldBegin("mime", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->mime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I16, 6);
    xfer += oprot->writeI16(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.duration) {
    xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->duration);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recognition) {
    xfer += oprot->writeFieldBegin("recognition", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->recognition.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->attributes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alternateData) {
    xfer += oprot->writeFieldBegin("alternateData", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->alternateData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NoteAttributes::ascii_fingerprint = "05191C2C3618087A364FEEB9B4854C4C";
const uint8_t NoteAttributes::binary_fingerprint[16] = {0x05,0x19,0x1C,0x2C,0x36,0x18,0x08,0x7A,0x36,0x4F,0xEE,0xB9,0xB4,0x85,0x4C,0x4C};

uint32_t NoteAttributes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subjectDate);
          this->__isset.subjectDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->author);
          this->__isset.author = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceURL);
          this->__isset.sourceURL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceApplication);
          this->__isset.sourceApplication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->shareDate);
          this->__isset.shareDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reminderOrder);
          this->__isset.reminderOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reminderDoneTime);
          this->__isset.reminderDoneTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reminderTime);
          this->__isset.reminderTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->placeName);
          this->__isset.placeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentClass);
          this->__isset.contentClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->applicationData.read(iprot);
          this->__isset.applicationData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastEditedBy);
          this->__isset.lastEditedBy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->classifications.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _ktype34;
            ::apache::thrift::protocol::TType _vtype35;
            iprot->readMapBegin(_ktype34, _vtype35, _size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              std::string _key38;
              xfer += iprot->readString(_key38);
              std::string& _val39 = this->classifications[_key38];
              xfer += iprot->readString(_val39);
            }
            iprot->readMapEnd();
          }
          this->__isset.classifications = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->creatorId);
          this->__isset.creatorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastEditorId);
          this->__isset.lastEditorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoteAttributes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NoteAttributes");
  if (this->__isset.subjectDate) {
    xfer += oprot->writeFieldBegin("subjectDate", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->subjectDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.latitude) {
    xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 10);
    xfer += oprot->writeDouble(this->latitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longitude) {
    xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 11);
    xfer += oprot->writeDouble(this->longitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.altitude) {
    xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 12);
    xfer += oprot->writeDouble(this->altitude);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.author) {
    xfer += oprot->writeFieldBegin("author", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->author);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source) {
    xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->source);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceURL) {
    xfer += oprot->writeFieldBegin("sourceURL", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->sourceURL);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceApplication) {
    xfer += oprot->writeFieldBegin("sourceApplication", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->sourceApplication);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shareDate) {
    xfer += oprot->writeFieldBegin("shareDate", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->shareDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderOrder) {
    xfer += oprot->writeFieldBegin("reminderOrder", ::apache::thrift::protocol::T_I64, 18);
    xfer += oprot->writeI64(this->reminderOrder);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderDoneTime) {
    xfer += oprot->writeFieldBegin("reminderDoneTime", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->reminderDoneTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderTime) {
    xfer += oprot->writeFieldBegin("reminderTime", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->reminderTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.placeName) {
    xfer += oprot->writeFieldBegin("placeName", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->placeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentClass) {
    xfer += oprot->writeFieldBegin("contentClass", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->contentClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.applicationData) {
    xfer += oprot->writeFieldBegin("applicationData", ::apache::thrift::protocol::T_STRUCT, 23);
    xfer += this->applicationData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastEditedBy) {
    xfer += oprot->writeFieldBegin("lastEditedBy", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->lastEditedBy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.classifications) {
    xfer += oprot->writeFieldBegin("classifications", ::apache::thrift::protocol::T_MAP, 26);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, this->classifications.size());
      std::map<std::string, std::string> ::const_iterator _iter40;
      for (_iter40 = this->classifications.begin(); _iter40 != this->classifications.end(); ++_iter40)
      {
        xfer += oprot->writeString(_iter40->first);
        xfer += oprot->writeString(_iter40->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.creatorId) {
    xfer += oprot->writeFieldBegin("creatorId", ::apache::thrift::protocol::T_I32, 27);
    xfer += oprot->writeI32(this->creatorId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastEditorId) {
    xfer += oprot->writeFieldBegin("lastEditorId", ::apache::thrift::protocol::T_I32, 28);
    xfer += oprot->writeI32(this->lastEditorId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Note::ascii_fingerprint = "7353B8F6A0836D0275C7D15623BC4B42";
const uint8_t Note::binary_fingerprint[16] = {0x73,0x53,0xB8,0xF6,0xA0,0x83,0x6D,0x02,0x75,0xC7,0xD1,0x56,0x23,0xBC,0x4B,0x42};

uint32_t Note::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->contentHash);
          this->__isset.contentHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->contentLength);
          this->__isset.contentLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->deleted);
          this->__isset.deleted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookGuid);
          this->__isset.notebookGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagGuids.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            iprot->readListBegin(_etype44, _size41);
            this->tagGuids.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += iprot->readString(this->tagGuids[_i45]);
            }
            iprot->readListEnd();
          }
          this->__isset.tagGuids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resources.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            iprot->readListBegin(_etype49, _size46);
            this->resources.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              xfer += this->resources[_i50].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.resources = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributes.read(iprot);
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagNames.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            iprot->readListBegin(_etype54, _size51);
            this->tagNames.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += iprot->readString(this->tagNames[_i55]);
            }
            iprot->readListEnd();
          }
          this->__isset.tagNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Note::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Note");
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->title);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.content) {
    xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->content);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentHash) {
    xfer += oprot->writeFieldBegin("contentHash", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->contentHash);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentLength) {
    xfer += oprot->writeFieldBegin("contentLength", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->contentLength);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.created) {
    xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->created);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updated) {
    xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->updated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleted) {
    xfer += oprot->writeFieldBegin("deleted", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->deleted);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookGuid) {
    xfer += oprot->writeFieldBegin("notebookGuid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->notebookGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagGuids) {
    xfer += oprot->writeFieldBegin("tagGuids", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->tagGuids.size());
      std::vector<Guid> ::const_iterator _iter56;
      for (_iter56 = this->tagGuids.begin(); _iter56 != this->tagGuids.end(); ++_iter56)
      {
        xfer += oprot->writeString((*_iter56));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resources) {
    xfer += oprot->writeFieldBegin("resources", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->resources.size());
      std::vector<Resource> ::const_iterator _iter57;
      for (_iter57 = this->resources.begin(); _iter57 != this->resources.end(); ++_iter57)
      {
        xfer += (*_iter57).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->attributes.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagNames) {
    xfer += oprot->writeFieldBegin("tagNames", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->tagNames.size());
      std::vector<std::string> ::const_iterator _iter58;
      for (_iter58 = this->tagNames.begin(); _iter58 != this->tagNames.end(); ++_iter58)
      {
        xfer += oprot->writeString((*_iter58));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Publishing::ascii_fingerprint = "A62655866CF21A0C0C20242173A3567A";
const uint8_t Publishing::binary_fingerprint[16] = {0xA6,0x26,0x55,0x86,0x6C,0xF2,0x1A,0x0C,0x0C,0x20,0x24,0x21,0x73,0xA3,0x56,0x7A};

uint32_t Publishing::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast59;
          xfer += iprot->readI32(ecast59);
          this->order = (NoteSortOrder::type)ecast59;
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ascending);
          this->__isset.ascending = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->publicDescription);
          this->__isset.publicDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Publishing::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Publishing");
  if (this->__isset.uri) {
    xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->uri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order) {
    xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->order);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ascending) {
    xfer += oprot->writeFieldBegin("ascending", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->ascending);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.publicDescription) {
    xfer += oprot->writeFieldBegin("publicDescription", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->publicDescription);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BusinessNotebook::ascii_fingerprint = "7A9832B34C9AE8645C18E89943F26D8C";
const uint8_t BusinessNotebook::binary_fingerprint[16] = {0x7A,0x98,0x32,0xB3,0x4C,0x9A,0xE8,0x64,0x5C,0x18,0xE8,0x99,0x43,0xF2,0x6D,0x8C};

uint32_t BusinessNotebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookDescription);
          this->__isset.notebookDescription = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast60;
          xfer += iprot->readI32(ecast60);
          this->privilege = (SharedNotebookPrivilegeLevel::type)ecast60;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->recommended);
          this->__isset.recommended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusinessNotebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BusinessNotebook");
  if (this->__isset.notebookDescription) {
    xfer += oprot->writeFieldBegin("notebookDescription", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->notebookDescription);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recommended) {
    xfer += oprot->writeFieldBegin("recommended", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->recommended);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SavedSearchScope::ascii_fingerprint = "81247BEACCBFEAACC0A7927FEC373161";
const uint8_t SavedSearchScope::binary_fingerprint[16] = {0x81,0x24,0x7B,0xEA,0xCC,0xBF,0xEA,0xAC,0xC0,0xA7,0x92,0x7F,0xEC,0x37,0x31,0x61};

uint32_t SavedSearchScope::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includeAccount);
          this->__isset.includeAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includePersonalLinkedNotebooks);
          this->__isset.includePersonalLinkedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->includeBusinessLinkedNotebooks);
          this->__isset.includeBusinessLinkedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SavedSearchScope::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SavedSearchScope");
  if (this->__isset.includeAccount) {
    xfer += oprot->writeFieldBegin("includeAccount", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->includeAccount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.includePersonalLinkedNotebooks) {
    xfer += oprot->writeFieldBegin("includePersonalLinkedNotebooks", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->includePersonalLinkedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.includeBusinessLinkedNotebooks) {
    xfer += oprot->writeFieldBegin("includeBusinessLinkedNotebooks", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->includeBusinessLinkedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SavedSearch::ascii_fingerprint = "559518531C75490BE1B22653A81FD670";
const uint8_t SavedSearch::binary_fingerprint[16] = {0x55,0x95,0x18,0x53,0x1C,0x75,0x49,0x0B,0xE1,0xB2,0x26,0x53,0xA8,0x1F,0xD6,0x70};

uint32_t SavedSearch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query);
          this->__isset.query = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast61;
          xfer += iprot->readI32(ecast61);
          this->format = (QueryFormat::type)ecast61;
          this->__isset.format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->scope.read(iprot);
          this->__isset.scope = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SavedSearch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SavedSearch");
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.query) {
    xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->query);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.format) {
    xfer += oprot->writeFieldBegin("format", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->format);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scope) {
    xfer += oprot->writeFieldBegin("scope", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->scope.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SharedNotebookRecipientSettings::ascii_fingerprint = "1959DF646639D95C0F1375CF60F71F5B";
const uint8_t SharedNotebookRecipientSettings::binary_fingerprint[16] = {0x19,0x59,0xDF,0x64,0x66,0x39,0xD9,0x5C,0x0F,0x13,0x75,0xCF,0x60,0xF7,0x1F,0x5B};

uint32_t SharedNotebookRecipientSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reminderNotifyEmail);
          this->__isset.reminderNotifyEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reminderNotifyInApp);
          this->__isset.reminderNotifyInApp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SharedNotebookRecipientSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SharedNotebookRecipientSettings");
  if (this->__isset.reminderNotifyEmail) {
    xfer += oprot->writeFieldBegin("reminderNotifyEmail", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->reminderNotifyEmail);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reminderNotifyInApp) {
    xfer += oprot->writeFieldBegin("reminderNotifyInApp", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->reminderNotifyInApp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SharedNotebook::ascii_fingerprint = "ADE8562808728688B25423E5F39AA8F5";
const uint8_t SharedNotebook::binary_fingerprint[16] = {0xAD,0xE8,0x56,0x28,0x08,0x72,0x86,0x88,0xB2,0x54,0x23,0xE5,0xF3,0x9A,0xA8,0xF5};

uint32_t SharedNotebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookGuid);
          this->__isset.notebookGuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->notebookModifiable);
          this->__isset.notebookModifiable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->requireLogin);
          this->__isset.requireLogin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceCreated);
          this->__isset.serviceCreated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceUpdated);
          this->__isset.serviceUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shareKey);
          this->__isset.shareKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast62;
          xfer += iprot->readI32(ecast62);
          this->privilege = (SharedNotebookPrivilegeLevel::type)ecast62;
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowPreview);
          this->__isset.allowPreview = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recipientSettings.read(iprot);
          this->__isset.recipientSettings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SharedNotebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SharedNotebook");
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userId) {
    xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->userId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookGuid) {
    xfer += oprot->writeFieldBegin("notebookGuid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->notebookGuid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookModifiable) {
    xfer += oprot->writeFieldBegin("notebookModifiable", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->notebookModifiable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requireLogin) {
    xfer += oprot->writeFieldBegin("requireLogin", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->requireLogin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceCreated) {
    xfer += oprot->writeFieldBegin("serviceCreated", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->serviceCreated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shareKey) {
    xfer += oprot->writeFieldBegin("shareKey", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->shareKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceUpdated) {
    xfer += oprot->writeFieldBegin("serviceUpdated", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->serviceUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.privilege) {
    xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->privilege);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.allowPreview) {
    xfer += oprot->writeFieldBegin("allowPreview", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->allowPreview);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.recipientSettings) {
    xfer += oprot->writeFieldBegin("recipientSettings", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->recipientSettings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NotebookRestrictions::ascii_fingerprint = "2F7A0A57E7093F201243B7214760883C";
const uint8_t NotebookRestrictions::binary_fingerprint[16] = {0x2F,0x7A,0x0A,0x57,0xE7,0x09,0x3F,0x20,0x12,0x43,0xB7,0x21,0x47,0x60,0x88,0x3C};

uint32_t NotebookRestrictions::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noReadNotes);
          this->__isset.noReadNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noCreateNotes);
          this->__isset.noCreateNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateNotes);
          this->__isset.noUpdateNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noExpungeNotes);
          this->__isset.noExpungeNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noShareNotes);
          this->__isset.noShareNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noEmailNotes);
          this->__isset.noEmailNotes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSendMessageToRecipients);
          this->__isset.noSendMessageToRecipients = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateNotebook);
          this->__isset.noUpdateNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noExpungeNotebook);
          this->__isset.noExpungeNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSetDefaultNotebook);
          this->__isset.noSetDefaultNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSetNotebookStack);
          this->__isset.noSetNotebookStack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noPublishToPublic);
          this->__isset.noPublishToPublic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noPublishToBusinessLibrary);
          this->__isset.noPublishToBusinessLibrary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noCreateTags);
          this->__isset.noCreateTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noUpdateTags);
          this->__isset.noUpdateTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noExpungeTags);
          this->__isset.noExpungeTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noSetParentTag);
          this->__isset.noSetParentTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->noCreateSharedNotebooks);
          this->__isset.noCreateSharedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast63;
          xfer += iprot->readI32(ecast63);
          this->updateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions::type)ecast63;
          this->__isset.updateWhichSharedNotebookRestrictions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast64;
          xfer += iprot->readI32(ecast64);
          this->expungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions::type)ecast64;
          this->__isset.expungeWhichSharedNotebookRestrictions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotebookRestrictions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NotebookRestrictions");
  if (this->__isset.noReadNotes) {
    xfer += oprot->writeFieldBegin("noReadNotes", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->noReadNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noCreateNotes) {
    xfer += oprot->writeFieldBegin("noCreateNotes", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->noCreateNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noUpdateNotes) {
    xfer += oprot->writeFieldBegin("noUpdateNotes", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->noUpdateNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noExpungeNotes) {
    xfer += oprot->writeFieldBegin("noExpungeNotes", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->noExpungeNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noShareNotes) {
    xfer += oprot->writeFieldBegin("noShareNotes", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->noShareNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noEmailNotes) {
    xfer += oprot->writeFieldBegin("noEmailNotes", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->noEmailNotes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSendMessageToRecipients) {
    xfer += oprot->writeFieldBegin("noSendMessageToRecipients", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->noSendMessageToRecipients);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noUpdateNotebook) {
    xfer += oprot->writeFieldBegin("noUpdateNotebook", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->noUpdateNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noExpungeNotebook) {
    xfer += oprot->writeFieldBegin("noExpungeNotebook", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->noExpungeNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSetDefaultNotebook) {
    xfer += oprot->writeFieldBegin("noSetDefaultNotebook", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->noSetDefaultNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSetNotebookStack) {
    xfer += oprot->writeFieldBegin("noSetNotebookStack", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->noSetNotebookStack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noPublishToPublic) {
    xfer += oprot->writeFieldBegin("noPublishToPublic", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->noPublishToPublic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noPublishToBusinessLibrary) {
    xfer += oprot->writeFieldBegin("noPublishToBusinessLibrary", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->noPublishToBusinessLibrary);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noCreateTags) {
    xfer += oprot->writeFieldBegin("noCreateTags", ::apache::thrift::protocol::T_BOOL, 14);
    xfer += oprot->writeBool(this->noCreateTags);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noUpdateTags) {
    xfer += oprot->writeFieldBegin("noUpdateTags", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->noUpdateTags);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noExpungeTags) {
    xfer += oprot->writeFieldBegin("noExpungeTags", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->noExpungeTags);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noSetParentTag) {
    xfer += oprot->writeFieldBegin("noSetParentTag", ::apache::thrift::protocol::T_BOOL, 17);
    xfer += oprot->writeBool(this->noSetParentTag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noCreateSharedNotebooks) {
    xfer += oprot->writeFieldBegin("noCreateSharedNotebooks", ::apache::thrift::protocol::T_BOOL, 18);
    xfer += oprot->writeBool(this->noCreateSharedNotebooks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateWhichSharedNotebookRestrictions) {
    xfer += oprot->writeFieldBegin("updateWhichSharedNotebookRestrictions", ::apache::thrift::protocol::T_I32, 19);
    xfer += oprot->writeI32((int32_t)this->updateWhichSharedNotebookRestrictions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expungeWhichSharedNotebookRestrictions) {
    xfer += oprot->writeFieldBegin("expungeWhichSharedNotebookRestrictions", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32((int32_t)this->expungeWhichSharedNotebookRestrictions);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Notebook::ascii_fingerprint = "1C897B74029D7B8562961FC4E1C828E3";
const uint8_t Notebook::binary_fingerprint[16] = {0x1C,0x89,0x7B,0x74,0x02,0x9D,0x7B,0x85,0x62,0x96,0x1F,0xC4,0xE1,0xC8,0x28,0xE3};

uint32_t Notebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->defaultNotebook);
          this->__isset.defaultNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceCreated);
          this->__isset.serviceCreated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceUpdated);
          this->__isset.serviceUpdated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->publishing.read(iprot);
          this->__isset.publishing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->published);
          this->__isset.published = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sharedNotebookIds.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            iprot->readListBegin(_etype68, _size65);
            this->sharedNotebookIds.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readI64(this->sharedNotebookIds[_i69]);
            }
            iprot->readListEnd();
          }
          this->__isset.sharedNotebookIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sharedNotebooks.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            iprot->readListBegin(_etype73, _size70);
            this->sharedNotebooks.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += this->sharedNotebooks[_i74].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.sharedNotebooks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->businessNotebook.read(iprot);
          this->__isset.businessNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->contact.read(iprot);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->restrictions.read(iprot);
          this->__isset.restrictions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Notebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Notebook");
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultNotebook) {
    xfer += oprot->writeFieldBegin("defaultNotebook", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->defaultNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceCreated) {
    xfer += oprot->writeFieldBegin("serviceCreated", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->serviceCreated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceUpdated) {
    xfer += oprot->writeFieldBegin("serviceUpdated", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->serviceUpdated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.publishing) {
    xfer += oprot->writeFieldBegin("publishing", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->publishing.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.published) {
    xfer += oprot->writeFieldBegin("published", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->published);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stack) {
    xfer += oprot->writeFieldBegin("stack", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->stack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharedNotebookIds) {
    xfer += oprot->writeFieldBegin("sharedNotebookIds", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, this->sharedNotebookIds.size());
      std::vector<int64_t> ::const_iterator _iter75;
      for (_iter75 = this->sharedNotebookIds.begin(); _iter75 != this->sharedNotebookIds.end(); ++_iter75)
      {
        xfer += oprot->writeI64((*_iter75));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sharedNotebooks) {
    xfer += oprot->writeFieldBegin("sharedNotebooks", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->sharedNotebooks.size());
      std::vector<SharedNotebook> ::const_iterator _iter76;
      for (_iter76 = this->sharedNotebooks.begin(); _iter76 != this->sharedNotebooks.end(); ++_iter76)
      {
        xfer += (*_iter76).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessNotebook) {
    xfer += oprot->writeFieldBegin("businessNotebook", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->businessNotebook.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contact) {
    xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->contact.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.restrictions) {
    xfer += oprot->writeFieldBegin("restrictions", ::apache::thrift::protocol::T_STRUCT, 17);
    xfer += this->restrictions.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* LinkedNotebook::ascii_fingerprint = "A7A04DDD02DE723E01FAAF74523796C6";
const uint8_t LinkedNotebook::binary_fingerprint[16] = {0xA7,0xA0,0x4D,0xDD,0x02,0xDE,0x72,0x3E,0x01,0xFA,0xAF,0x74,0x52,0x37,0x96,0xC6};

uint32_t LinkedNotebook::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shareName);
          this->__isset.shareName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shardId);
          this->__isset.shardId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shareKey);
          this->__isset.shareKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateSequenceNum);
          this->__isset.updateSequenceNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->noteStoreUrl);
          this->__isset.noteStoreUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webApiUrlPrefix);
          this->__isset.webApiUrlPrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->businessId);
          this->__isset.businessId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LinkedNotebook::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LinkedNotebook");
  if (this->__isset.shareName) {
    xfer += oprot->writeFieldBegin("shareName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->shareName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shardId) {
    xfer += oprot->writeFieldBegin("shardId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->shardId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shareKey) {
    xfer += oprot->writeFieldBegin("shareKey", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->shareKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uri) {
    xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->uri);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updateSequenceNum) {
    xfer += oprot->writeFieldBegin("updateSequenceNum", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->updateSequenceNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.noteStoreUrl) {
    xfer += oprot->writeFieldBegin("noteStoreUrl", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->noteStoreUrl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.webApiUrlPrefix) {
    xfer += oprot->writeFieldBegin("webApiUrlPrefix", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->webApiUrlPrefix);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stack) {
    xfer += oprot->writeFieldBegin("stack", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->stack);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.businessId) {
    xfer += oprot->writeFieldBegin("businessId", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->businessId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NotebookDescriptor::ascii_fingerprint = "7C04E117F0486F5C405AFB211B3082DD";
const uint8_t NotebookDescriptor::binary_fingerprint[16] = {0x7C,0x04,0xE1,0x17,0xF0,0x48,0x6F,0x5C,0x40,0x5A,0xFB,0x21,0x1B,0x30,0x82,0xDD};

uint32_t NotebookDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notebookDisplayName);
          this->__isset.notebookDisplayName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contactName);
          this->__isset.contactName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasSharedNotebook);
          this->__isset.hasSharedNotebook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->joinedUserCount);
          this->__isset.joinedUserCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotebookDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NotebookDescriptor");
  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notebookDisplayName) {
    xfer += oprot->writeFieldBegin("notebookDisplayName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->notebookDisplayName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contactName) {
    xfer += oprot->writeFieldBegin("contactName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->contactName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hasSharedNotebook) {
    xfer += oprot->writeFieldBegin("hasSharedNotebook", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->hasSharedNotebook);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.joinedUserCount) {
    xfer += oprot->writeFieldBegin("joinedUserCount", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->joinedUserCount);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
